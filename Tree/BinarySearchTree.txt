이진탐색트리의 한계점과 극복방법 조사

이진 탐색트리의 한계점은 자식이 한쪽으로만 치우치는 불균형이 발생할 수 있습니다.
한쪽으로만 몰렸을 경우 절반씩만 게산하여 빠르다는 장점이 있었는데 한쪽으로만 몰리다보니 절반씩 계산하는게 
소용이 없어지고 시간도 증가하게 됩니다.
이런 현상을 막기위해 자가균형기능이 있는 Red-Black Tree와 AVL Tree가 있습니다

이진탐색트리의 장점은 빠른  불균형이 발생하게 되면 탐색시간이 길어진다





이진탐색트리의 순회방법 조사와 순회순서

전위순회 : 부모 -> 왼쪽자식 -> 오른쪽 자식
중위 순회 : 외쪽 -> 부모 -> 오른쪽 자식 
후위순회 : 왼쪽 자식 -> 오른쪽 자식 - > 부모

			A
	    B	    C
	  D	  E	  F   G

1 : A -> B -> C -> D -> E -> F -> G
2 : D -> B -> E -> A -> F -> C -> G
3 : D -> E -> B -> F -> G -> C -> A 








https://thinking-developer.tistory.com/74

































이진탐색트리의 한계점으로는 
완전한 이진탐색트리의 경우에는 데이터를 빠르게 탐색할 수 있지만 불균형이 발생하게 되면 탐색시간이 오래걸리게 되고
노드를 추가하거나 삭제하는 과정에서도 불균형이 발생할 수 있습니다.









이진탐색트리(Binary Search Tree, BST)는 데이터를 저장하고 탐색하는 효율적인 자료구조 중 하나입니다. 하지만 이진탐색트리에도 몇 가지 한계가 있습니다.

불균형한 트리의 경우 탐색 시간이 느려질 수 있습니다.

이진탐색트리는 완전히 균형잡힌 트리일 때 탐색 시간이 최소가 됩니다. 하지만 노드를 추가하거나 삭제하는 과정에서 트리가 불균형해질 수 있습니다. 이러한 경우 탐색 시간이 더 오래 걸릴 수 있습니다.
최악의 경우 탐색 시간이 O(n)이 될 수 있습니다.

이진탐색트리에서 탐색을 하기 위해서는 해당 노드를 찾을 때까지 평균적으로 O(log n)번의 비교가 필요합니다. 하지만 최악의 경우, 모든 노드가 한쪽으로 치우쳐져 있을 때는 탐색 시간이 O(n)이 될 수 있습니다.
트리의 크기가 고정되어 있는 경우 배열 기반의 자료구조보다 메모리 사용량이 큽니다.

이진탐색트리는 노드를 동적으로 추가할 수 있는 자료구조입니다. 하지만 트리의 크기가 고정되어 있는 경우, 배열 기반의 자료구조를 사용하는 것이 더 효율적입니다.
삽입, 삭제 연산이 느릴 수 있습니다.

이진탐색트리에서 삽입, 삭제 연산을 수행할 때는 노드를 추가하거나 삭제한 후, 다시 균형잡힌 상태로 만들기 위한 회전 연산을 수행해야 합니다. 이 과정에서 불필요한 비용이 발생할 수 있습니다.
따라서, 이진탐색트리는 데이터를 빠르게 탐색할 수 있는 효율적인 자료구조이지만, 트리의 크기나 구조에 따라서 탐색 시간이 느려질 수 있습니다. 이러한 한계를 극복하기 위해서는 균형 잡힌 이진탐색트리(Adelson-Velskii and Landis, AVL 트리)나 빠른 삽입, 삭제 연산을 지원하는 레드-블랙 트리(Red-Black Tree) 등의 자료구조를 사용할 수 있습니다.